import { OnApplicationBootstrap } from '@nestjs/common';
import { TerminusModuleOptions } from './interfaces';
import { HttpAdapterHost } from '@nestjs/core';
import { Terminus, HealthCheckMap } from '@godaddy/terminus';
/**
 * Bootstraps the third party Terminus library with the
 * configured Module options
 */
export declare class TerminusBootstrapService implements OnApplicationBootstrap {
    private readonly options;
    private readonly terminus;
    private readonly refHost;
    /**
     * The http server of NestJS
     */
    private httpServer;
    /**
     * The NestJS logger
     */
    private readonly logger;
    /**
     * Initializes the service
     * @param options The terminus module options
     * @param refHost The application reference host of NestJS which contains the http server instance
     * @param terminus The terminus instance
     */
    constructor(options: TerminusModuleOptions, terminus: Terminus, refHost: HttpAdapterHost<any>);
    /**
     * Executes the given health indicators and stores the caused
     * errors and results
     * @param healthIndicators The health indicators which should get executed
     */
    private executeHealthIndicators;
    /**
     * Logs an error message of terminus
     * @param message The log message
     * @param error The error which was thrown
     */
    private logError;
    /**
     * Logs the health check registration to the logger
     * @param healthChecks The health check map to log
     */
    private logHealthCheckRegister;
    private getHealthCheckExecutor;
    /**
     * Returns the health check map using the configured health
     * indicators
     */
    getHealthChecksMap(): HealthCheckMap;
    /**
     * Bootstraps the third party terminus library with
     * the given module options
     */
    private bootstrapTerminus;
    /**
     * Gets called when the application gets bootstrapped.
     */
    onApplicationBootstrap(): void;
}
