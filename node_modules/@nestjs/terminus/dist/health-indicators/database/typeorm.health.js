"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const utils_1 = require("../../utils");
const database_health_indicator_1 = require("./database-health-indicator");
/**
 * The TypeOrmeHealthIndicator contains health indicators
 * which are used for health checks related to typeorm
 */
let TypeOrmHealthIndicator = class TypeOrmHealthIndicator extends database_health_indicator_1.DatabaseHealthIndicator {
    /**
     * Initializes the typeorm indicator
     * @param connection The typeorm connection of the application context
     *
     * @public
     */
    constructor(connection) {
        super(connection);
        this.connection = connection;
    }
    /**
     * Pings a typeorm
     * @param connection The connection which the ping should get executed
     * @param timeout The timeout how long the ping should maximum take
     *
     */
    pingDb(connection, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield utils_1.promiseTimeout(timeout, connection.query('SELECT 1'));
        });
    }
};
TypeOrmHealthIndicator = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Optional()),
    __metadata("design:paramtypes", [typeorm_1.Connection])
], TypeOrmHealthIndicator);
exports.TypeOrmHealthIndicator = TypeOrmHealthIndicator;
