import { Connection as MongooseConnection } from 'mongoose';
import { Connection } from 'typeorm';
import { HealthIndicatorResult } from '../../interfaces';
import { DatabasePingCheckSettings } from '../databse-ping-check-settings.interface';
import { HealthIndicator } from '../health-indicator';
/**
 * Abstract DatabaseHealthIndicator
 */
export declare abstract class DatabaseHealthIndicator extends HealthIndicator {
    protected connection: Connection | MongooseConnection;
    /**
     * Constructor with the connection
     * @param connection The underlying Connection instance from TypeOrm or Mongoose connection
     */
    protected constructor(connection: Connection | MongooseConnection);
    /**
     * Pings a typeorm
     * @param connection The connection which the ping should get executed
     * @param timeout The timeout how long the ping should maximum take
     */
    protected abstract pingDb(connection: Connection | MongooseConnection, timeout: number): Promise<any>;
    /**
     * Checks if the typeorm responds in (default) 1000ms and
     * returns a result object corresponding to the result
     * @param key
     * @param options
     */
    pingCheck(key: string, options?: DatabasePingCheckSettings): Promise<HealthIndicatorResult>;
}
